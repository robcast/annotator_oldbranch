#!/usr/bin/env node
var path = require('path');

var coffeeify = require('caching-coffeeify');
var connect = require('connect');
var convert = require('convert-source-map');
var jwt = require('jwt-simple');
var iso8601 = require('iso8601');
var glob = require('glob');
var q = require('kew')
var watchify = require('watchify')

var build = require('./build');

var CONSUMER_KEY = 'mockconsumer';
var CONSUMER_SECRET = 'mockconsumersecret';
var CONSUMER_TTL = 1800;


function browserify(opts, xopts) {
  var b = require('browserify')(opts, xopts);
  b.serve = serve.bind(b);
  return b;
}


// Serve a browserify bundle with connect middleware
function serve(options) {
  var promise = null;
  var bundle = this.bundle.bind(this);
  var self = this;

  // A function which fulfills the promise of building a bundle.
  // Based on connect-browserify.
  var build = function () {
    promise = q.defer();
    self.bundle(options, function (err, result) {
      if (err) {
        console.error(err);
        promise.reject(err);
      } else {
        promise.resolve(result);
      }
    });
  }

  // Build and rebuild on changes
  build()
  watchify(this).on('update', build);

  // Return middleware to serve the bundle
  return function (req, res, next) {
    res.setHeader('Content-Type', 'application/javascript');
    promise.then(function (result) {
      var src = convert.removeComments(result);
      var srcMap = convert.fromSource(result);
      var sources = srcMap.getProperty('sources');
      var sourcesContent = srcMap.getProperty('sourcesContent');

      // Make the source files resolve relative to the package root.
      // Strip absolute path information from the source map sources
      sources = sources.map(function (source) {
        return '/' + path.relative(process.cwd(), source);
      });

      // Add all the sources and set the root relative to the workspace
      srcMap.setProperty('sources', sources);

      res.write(src.slice(0,-2));
      res.write(srcMap.toComment());
      res.end('\n;');
    }).fail(next);
  }
}


var app = module.exports = connect();

// Token
app.use('/api/token', function(request, response) {
  var payload = {
    'consumerKey': CONSUMER_KEY,
    'userId': 'alice',
    'issuedAt': new Date().toISOString(),
    'ttl': CONSUMER_TTL
  };
  var tok = jwt.encode(payload, CONSUMER_SECRET);

  response.setHeader('Access-Control-Allow-Origin', request.headers['origin']);
  response.setHeader('Access-Control-Allow-Credentials', 'true');
  response.setHeader('Access-Control-Expose-Headers', 'Location, Content-Type, Content-Length');

  if (request.method == 'OPTIONS') {
    response.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Content-Length');
    response.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    response.setHeader('Access-Control-Max-Age', '86400');
  }

  response.end(tok);
});


// Core
app.use('/lib/annotator.js', build.annotator(browserify).serve({
  debug: true,
  standalone: 'Annotator'
}));


// Plugins
glob.sync('./src/plugin/*.coffee').forEach(function (p) {
  var b = build.plugin(browserify, p);
  var path = p.replace('./src', '/lib').replace('.coffee', '.js');
  app.use(path, b.serve({debug: true, standalone: 'Annotator'}));
});


// Tests
glob.sync('./test/**/*.coffee').forEach(function (t) {
  if (t == './test/helpers.coffee') {
    var b = browserify({extensions: '.coffee'})
      .require('./test/helpers', {expose: 'helpers'})
      .require('./src/annotator', {expose: 'annotator'})
      .transform(coffeeify)
    ;
    app.use('/test/helpers.js', b.serve({debug: true}));
  } else {
    var b = build.test(browserify, t).external('annotator');
    var path = t.replace('./', '/').replace('.coffee', '.js');
    app.use(path, b.serve({debug: true}));
  }
});


// Static files
app.use(connect.static(process.cwd()));


// Go
if (require.main === module) {
  app.listen(4000);
  console.log("Development: http://localhost:4000/dev.html");
  console.log("Testing: http://localhost:4000/test/runner.html");
}
